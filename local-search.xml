<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>树的遍历</title>
    <link href="/2022/10/27/%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/"/>
    <url>/2022/10/27/%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/</url>
    
    <content type="html"><![CDATA[<h4 id="二叉树的遍历应用实例"><a href="#二叉树的遍历应用实例" class="headerlink" title="二叉树的遍历应用实例"></a>二叉树的遍历应用实例</h4><h5 id="前序遍历，中序遍历，后序遍历步骤"><a href="#前序遍历，中序遍历，后序遍历步骤" class="headerlink" title="前序遍历，中序遍历，后序遍历步骤"></a>前序遍历，中序遍历，后序遍历步骤</h5><h6 id="前序遍历"><a href="#前序遍历" class="headerlink" title="前序遍历"></a>前序遍历</h6><blockquote><p>1.先输出当前节点</p><p>2.如果当前节点的左子节点不为空，则递归前序遍历</p><p>3.如果当前节点的右子节点不为空，则递归前序遍历</p></blockquote><h6 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h6><blockquote><p>1.如果当前节点的左子节点不为空，则递归中序遍历</p><p>2.输出当前节点</p><p>3.如果当前节点的右子节点不为空，则递归中序遍历</p></blockquote><h6 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h6><blockquote><p>1.如果当前节点的左子节点不为空，则递归后序遍历</p><p>2.如果当前节点的右子节点不为空，则递归后序遍历</p><p>3.输出当前节点</p></blockquote><p>代码实现：</p><p>先创建HeroNode 结点</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">HeroNode</span> &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> no;<br><span class="hljs-keyword">private</span> String name;<br><span class="hljs-keyword">private</span> HeroNode left; <span class="hljs-comment">//默认null</span><br><span class="hljs-keyword">private</span> HeroNode right; <span class="hljs-comment">//默认null</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">HeroNode</span><span class="hljs-params">(<span class="hljs-type">int</span> no, String name)</span> &#123;<br><span class="hljs-built_in">this</span>.no = no;<br><span class="hljs-built_in">this</span>.name = name;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getNo</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> no;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setNo</span><span class="hljs-params">(<span class="hljs-type">int</span> no)</span> &#123;<br><span class="hljs-built_in">this</span>.no = no;<br>&#125;<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> name;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br><span class="hljs-built_in">this</span>.name = name;<br>&#125;<br><span class="hljs-keyword">public</span> HeroNode <span class="hljs-title function_">getLeft</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> left;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setLeft</span><span class="hljs-params">(HeroNode left)</span> &#123;<br><span class="hljs-built_in">this</span>.left = left;<br>&#125;<br><span class="hljs-keyword">public</span> HeroNode <span class="hljs-title function_">getRight</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> right;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setRight</span><span class="hljs-params">(HeroNode right)</span> &#123;<br><span class="hljs-built_in">this</span>.right = right;<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;HeroNode [no=&quot;</span> + no + <span class="hljs-string">&quot;, name=&quot;</span> + name + <span class="hljs-string">&quot;]&quot;</span>;<br>&#125;<br><br><span class="hljs-comment">//编写前序遍历的方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">preOrder</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-built_in">this</span>); <span class="hljs-comment">//先输出父结点</span><br><span class="hljs-comment">//递归向左子树前序遍历</span><br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.left != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-built_in">this</span>.left.preOrder();<br>&#125;<br><span class="hljs-comment">//递归向右子树前序遍历</span><br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.right != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-built_in">this</span>.right.preOrder();<br>&#125;<br>&#125;<br><span class="hljs-comment">//中序遍历</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">infixOrder</span><span class="hljs-params">()</span> &#123;<br><br><span class="hljs-comment">//递归向左子树中序遍历</span><br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.left != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-built_in">this</span>.left.infixOrder();<br>&#125;<br><span class="hljs-comment">//输出父结点</span><br>System.out.println(<span class="hljs-built_in">this</span>);<br><span class="hljs-comment">//递归向右子树中序遍历</span><br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.right != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-built_in">this</span>.right.infixOrder();<br>&#125;<br>&#125;<br><span class="hljs-comment">//后序遍历</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postOrder</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.left != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-built_in">this</span>.left.postOrder();<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.right != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-built_in">this</span>.right.postOrder();<br>&#125;<br>System.out.println(<span class="hljs-built_in">this</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>定义BinaryTree 二叉树</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">BinaryTree</span> &#123;<br><span class="hljs-keyword">private</span> HeroNode root;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setRoot</span><span class="hljs-params">(HeroNode root)</span> &#123;<br><span class="hljs-built_in">this</span>.root = root;<br>&#125;<br><br><span class="hljs-comment">//前序遍历</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">preOrder</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.root != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-built_in">this</span>.root.preOrder();<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;二叉树为空，无法遍历&quot;</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//中序遍历</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">infixOrder</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.root != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-built_in">this</span>.root.infixOrder();<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;二叉树为空，无法遍历&quot;</span>);<br>&#125;<br>&#125;<br>    <br><span class="hljs-comment">//后序遍历</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">postOrder</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">this</span>.root != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-built_in">this</span>.root.postOrder();<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;二叉树为空，无法遍历&quot;</span>);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.tree;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BinaryTreeDemo</span> &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//先需要创建一颗二叉树</span><br><span class="hljs-type">BinaryTree</span> <span class="hljs-variable">binaryTree</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BinaryTree</span>();<br><span class="hljs-comment">//创建需要的结点</span><br><span class="hljs-type">HeroNode</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HeroNode</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;宋江&quot;</span>);<br><span class="hljs-type">HeroNode</span> <span class="hljs-variable">node2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HeroNode</span>(<span class="hljs-number">2</span>, <span class="hljs-string">&quot;吴用&quot;</span>);<br><span class="hljs-type">HeroNode</span> <span class="hljs-variable">node3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HeroNode</span>(<span class="hljs-number">3</span>, <span class="hljs-string">&quot;卢俊义&quot;</span>);<br><span class="hljs-type">HeroNode</span> <span class="hljs-variable">node4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HeroNode</span>(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;林冲&quot;</span>);<br><span class="hljs-type">HeroNode</span> <span class="hljs-variable">node5</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HeroNode</span>(<span class="hljs-number">5</span>, <span class="hljs-string">&quot;关胜&quot;</span>);<br><br><span class="hljs-comment">//说明，我们先手动创建该二叉树，后面我们学习递归的方式创建二叉树</span><br>root.setLeft(node2);<br>root.setRight(node3);<br>node3.setRight(node4);<br>node3.setLeft(node5);<br>binaryTree.setRoot(root);<br><br><span class="hljs-comment">//测试</span><br>        System.out.println(<span class="hljs-string">&quot;前序遍历&quot;</span>); <br>        binaryTree.preOrder();<span class="hljs-comment">// 1,2,3,5,4</span><br><br><span class="hljs-comment">//测试 </span><br>System.out.println(<span class="hljs-string">&quot;中序遍历&quot;</span>);<br>binaryTree.infixOrder(); <span class="hljs-comment">// 2,1,5,3,4</span><br><br>        System.out.println(<span class="hljs-string">&quot;后序遍历&quot;</span>);<br>        binaryTree.postOrder(); <span class="hljs-comment">// 2,5,4,3,1</span><br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>代码运行结果：</p><p><img src="https://raw.githubusercontent.com/chaozuoxitong123/tuchuang/main/img202210271407280.png" alt="image-20220923192800153"></p><p>这篇博客是我在B站看韩顺平老师数据结构和算法的课时的笔记，记录一下，防止忘记，也希望能帮助各位朋友。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>罗马数字转整数</title>
    <link href="/2022/10/27/%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97%E8%BD%AC%E6%95%B4%E6%95%B0/"/>
    <url>/2022/10/27/%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97%E8%BD%AC%E6%95%B4%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<p>罗马数字包含以下七种字符: I， V， X， L，C，D 和 M。</p><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs mathematica">字符          数值<br><span class="hljs-built_in">I</span>             <span class="hljs-number">1</span><br><span class="hljs-variable">V</span>             <span class="hljs-number">5</span><br><span class="hljs-variable">X</span>             <span class="hljs-number">10</span><br><span class="hljs-variable">L</span>             <span class="hljs-number">50</span><br><span class="hljs-built_in">C</span>             <span class="hljs-number">100</span><br><span class="hljs-built_in">D</span>             <span class="hljs-number">500</span><br><span class="hljs-variable">M</span>             <span class="hljs-number">1000</span><br></code></pre></td></tr></table></figure><p>例如， 罗马数字 <code>2</code> 写做 <code>II</code> ，即为两个并列的 1 。<code>12</code> 写做 <code>XII</code> ，即为 <code>X</code> + <code>II</code> 。 <code>27</code> 写做 <code>XXVII</code>, 即为 <code>XX</code> + <code>V</code> + <code>II</code> 。</p><p>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 <code>IIII</code>，而是 <code>IV</code>。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 <code>IX</code>。这个特殊的规则只适用于以下六种情况：</p><blockquote><ul><li><code>I</code> 可以放在 <code>V</code> (5) 和 <code>X</code> (10) 的左边，来表示 4 和 9。</li><li><code>X</code> 可以放在 <code>L</code> (50) 和 <code>C</code> (100) 的左边，来表示 40 和 90。 </li><li><code>C</code> 可以放在 <code>D</code> (500) 和 <code>M</code> (1000) 的左边，来表示 400 和 900。</li></ul></blockquote><p>给定一个罗马数字，将其转换成整数。</p><p><strong>示例 1:</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">输入: s = &quot;III&quot;</span><br><span class="hljs-section">输出: 3</span><br></code></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">输入: s = &quot;IV&quot;</span><br><span class="hljs-section">输出: 4</span><br></code></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">输入: s = &quot;IX&quot;</span><br><span class="hljs-section">输出: 9</span><br></code></pre></td></tr></table></figure><p><strong>示例 4:</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">输入: s = &quot;LVIII&quot;</span><br><span class="hljs-section">输出: 58</span><br><span class="hljs-section">解释: L = 50, V= 5, III = 3.</span><br></code></pre></td></tr></table></figure><p><strong>示例 5:</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">输入: s = &quot;MCMXCIV&quot;</span><br><span class="hljs-section">输出: 1994</span><br><span class="hljs-section">解释: M = 1000, CM = 900, XC = 90, IV = 4.</span><br></code></pre></td></tr></table></figure><blockquote><ul><li><code>1 &lt;= s.length &lt;= 15</code></li><li><code>s</code> 仅含字符 <code>(&#39;I&#39;, &#39;V&#39;, &#39;X&#39;, &#39;L&#39;, &#39;C&#39;, &#39;D&#39;, &#39;M&#39;)</code></li><li>题目数据保证 <code>s</code> 是一个有效的罗马数字，且表示整数在范围 <code>[1, 3999]</code> 内</li><li>题目所给测试用例皆符合罗马数字书写规则，不会出现跨位等情况。</li><li>IL 和 IM 这样的例子并不符合题目要求，49 应该写作 XLIX，999 应该写作 CMXCIX 。</li></ul></blockquote><p>思路分析：由题意知，当小值在大值左边时，做减法运算；当小值在大值右边时，做加法运算。所以在编码时，可以比较当前位与后面一位的大小关系，前面的元素比后面的元素小，进行减法运算，减去当前位的值；前面的元素比后面的元素大，进行加法运算，加上当前位的值。最后一位必定做加法运算。</p><p>代码实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">T13</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">// 测试一把</span><br><span class="hljs-type">Solution</span> <span class="hljs-variable">solution</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Solution</span>();<br><span class="hljs-type">int</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> solution.Numbers(<span class="hljs-string">&quot;LVIII&quot;</span>);<br>System.out.println(flag);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">Numbers</span><span class="hljs-params">(String s)</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<span class="hljs-comment">//用来计算最终的结果</span><br><span class="hljs-type">int</span> <span class="hljs-variable">preNum</span> <span class="hljs-operator">=</span> getNumbers(s.charAt(<span class="hljs-number">0</span>));<span class="hljs-comment">//定义一个指针，指向字符串的第一个字符，也就是下标为0的位置</span><br><span class="hljs-comment">//开始遍历字符串，把前面一个字符和后面一个字符进行比较</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;i &lt; s.length();i++) &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">num</span> <span class="hljs-operator">=</span> getNumbers(s.charAt(i));<span class="hljs-comment">//定义一个指针num,指向后面的一个元素</span><br><span class="hljs-keyword">if</span>(preNum &lt; num) &#123;<br><span class="hljs-comment">//前面的元素比后面的元素小，进行减法运算</span><br>sum -= preNum;<br>&#125;<span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">//前面的元素比后面的元素大，进行加法运算</span><br>sum += preNum;<br>&#125;<br>preNum = num;<span class="hljs-comment">//指针后移</span><br>&#125;<br>sum += preNum;<span class="hljs-comment">//最后一个元素必定进行加法运算</span><br><span class="hljs-keyword">return</span> sum;<span class="hljs-comment">//计算结束，返回结果</span><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getNumbers</span><span class="hljs-params">(<span class="hljs-type">char</span> ch)</span> &#123;<br><span class="hljs-keyword">switch</span> (ch) &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;I&#x27;</span>: <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;V&#x27;</span>: <span class="hljs-keyword">return</span> <span class="hljs-number">5</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;X&#x27;</span>: <span class="hljs-keyword">return</span> <span class="hljs-number">10</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;L&#x27;</span>: <span class="hljs-keyword">return</span> <span class="hljs-number">50</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;C&#x27;</span>: <span class="hljs-keyword">return</span> <span class="hljs-number">100</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;D&#x27;</span>: <span class="hljs-keyword">return</span> <span class="hljs-number">500</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;M&#x27;</span>: <span class="hljs-keyword">return</span> <span class="hljs-number">1000</span>;<br><span class="hljs-keyword">default</span>:<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行截图：</p><p><img src="https://raw.githubusercontent.com/chaozuoxitong123/tuchuang/main/img202210271349680.png" alt="image-20221011212035568"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/10/26/hello-world/"/>
    <url>/2022/10/26/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
